// AUTO-GENERATED by typescript-type-def

export default types
export namespace types {
  export type I64 = number
  export type Usize = number
  export type StashScene = {
    id: string
    performers: string[]
    imageUrl: string | null
    title: string
    studio: string | null
    tags: string[]
    rating: types.I64 | null
    interactive: boolean
    markerCount: types.Usize
  }
  export type VideoSource = "stash" | "localFile"
  export type VideoId =
    | {type: "localFile"; id: string}
    | {type: "stash"; id: string}
  export type MarkerId =
    | {type: "localFile"; id: types.I64}
    | {type: "stash"; id: types.I64}
  export type F64 = number
  export type Clip = {
    source: types.VideoSource
    videoId: types.VideoId
    markerId: types.MarkerId
    /**
     * Start and endpoint inside the video in seconds.
     */
    range: [types.F64, types.F64]
    indexWithinVideo: types.Usize
    indexWithinMarker: types.Usize
  }
  export type SelectedMarker = {
    id: types.MarkerId
    videoId: types.VideoId
    selectedRange: [types.F64, types.F64]
    indexWithinVideo: types.Usize
  }
  export type VideoResolution = "720" | "1080" | "4K"
  export type U32 = number
  export type CreateVideoBody = {
    fileName: string
    clips: types.Clip[]
    selectedMarkers: types.SelectedMarker[]
    outputResolution: types.VideoResolution
    outputFps: types.U32
    songIds: types.I64[]
    musicVolume: types.F64 | null
  }
  export type ClipOrder = "random" | "scene-order" | "pmv"
  export type RandomizedClipOptions = {
    baseDuration: types.F64
    divisors: types.F64[]
  }
  export type PmvClipOptions =
    | ({type: "randomized"} & types.RandomizedClipOptions)
    | ({type: "songs"} & {
        beats_per_measure: types.Usize
        cut_after_measure_count: types.Usize
      })
  export type ClipOptions =
    | ({type: "pmv"} & {song_ids: types.I64[]; clips: types.PmvClipOptions})
    | ({type: "default"} & types.RandomizedClipOptions)
  export type CreateClipsBody = {
    clipOrder: types.ClipOrder
    splitClips: boolean
    markers: types.SelectedMarker[]
    seed: string | null
    clips: types.ClipOptions
  }
  export type VideoDto = {
    id: types.VideoId
    title: string
    performers: string[]
    fileName: string
    interactive: boolean
  }
  export type MarkerDto = {
    id: types.MarkerId
    videoId: types.VideoId
    primaryTag: string
    streamUrl: string
    start: types.F64
    end: types.F64
    sceneTitle: string | null
    performers: string[]
    fileName: string | null
    sceneInteractive: boolean
    tags: string[]
    screenshotUrl: string | null
    indexWithinVideo: types.Usize
  }
  export type ListVideoDto = {video: types.VideoDto; markers: types.MarkerDto[]}
  export type F32 = number
  export type ClipsResponse = {
    clips: types.Clip[]
    streams: Record<string, string>
    videos: types.VideoDto[]
    beatOffsets: types.F32[] | null
  }
  export type PerformerDto = {
    id: string
    sceneCount: types.I64
    name: string
    imageUrl: string | null
    tags: string[]
    rating: types.I64 | null
    favorite: boolean
  }
  export type TagDto = {name: string; id: string; markerCount: types.I64}
}
