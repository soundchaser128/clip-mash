/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * clip-mash
 * OpenAPI spec version: 0.17.0
 */
import {z as zod} from "zod"

export const listMarkersQueryParams = zod.object({
  videoIds: zod.string().nullish(),
})

export const createNewMarkerBody = zod.object({
  createInStash: zod.boolean(),
  marker: zod.object({
    createdOn: zod.number().nullish(),
    end: zod.number(),
    indexWithinVideo: zod.number(),
    markerStashId: zod.number().nullish(),
    previewImagePath: zod.string().nullish(),
    start: zod.number(),
    title: zod.string(),
    videoId: zod.string(),
    videoInteractive: zod.boolean(),
  }),
})

export const createNewMarkerResponseIndexWithinVideoMin = 0

export const createNewMarkerResponse = zod.object({
  createdOn: zod.number(),
  end: zod.number(),
  fileName: zod.string().nullish(),
  id: zod.number(),
  indexWithinVideo: zod
    .number()
    .min(createNewMarkerResponseIndexWithinVideoMin),
  primaryTag: zod.string(),
  sceneInteractive: zod.boolean(),
  sceneTitle: zod.string().nullish(),
  screenshotUrl: zod.string(),
  source: zod.enum(["Folder", "Download", "Stash"]),
  start: zod.number(),
  streamUrl: zod.string(),
  tags: zod.array(zod.string()),
  videoId: zod.string(),
})

export const updateMarkerParams = zod.object({
  id: zod.number(),
})

export const updateMarkerBody = zod.object({
  end: zod.number().nullish(),
  start: zod.number().nullish(),
  stashMarkerId: zod.number().nullish(),
  title: zod.string().nullish(),
})

export const updateMarkerResponseIndexWithinVideoMin = 0

export const updateMarkerResponse = zod.object({
  createdOn: zod.number(),
  end: zod.number(),
  fileName: zod.string().nullish(),
  id: zod.number(),
  indexWithinVideo: zod.number().min(updateMarkerResponseIndexWithinVideoMin),
  primaryTag: zod.string(),
  sceneInteractive: zod.boolean(),
  sceneTitle: zod.string().nullish(),
  screenshotUrl: zod.string(),
  source: zod.enum(["Folder", "Download", "Stash"]),
  start: zod.number(),
  streamUrl: zod.string(),
  tags: zod.array(zod.string()),
  videoId: zod.string(),
})

export const deleteMarkerParams = zod.object({
  id: zod.number(),
})

export const splitMarkerParams = zod.object({
  id: zod.number(),
})

export const splitMarkerQueryParams = zod.object({
  time: zod.number(),
})

export const listVideosQueryPageMin = 0
export const listVideosQuerySizeMin = 0

export const listVideosQueryParams = zod.object({
  query: zod.string().nullish(),
  source: zod.enum(["Folder", "Download", "Stash"]).nullish(),
  hasMarkers: zod.boolean().nullish(),
  page: zod.number().min(listVideosQueryPageMin).nullish(),
  size: zod.number().min(listVideosQuerySizeMin).nullish(),
  sort: zod.string().nullish(),
  dir: zod.enum(["asc", "desc"]).nullish(),
})

export const listVideosResponsePageNumberMin = 0
export const listVideosResponsePageSizeMin = 0
export const listVideosResponseTotalItemsMin = 0
export const listVideosResponseTotalPagesMin = 0
export const listVideosResponseContentMarkerCountMin = 0

export const listVideosResponse = zod.object({
  content: zod.array(
    zod.object({
      markerCount: zod.number().min(listVideosResponseContentMarkerCountMin),
      video: zod.object({
        createdOn: zod.number(),
        duration: zod.number(),
        fileName: zod.string(),
        filePath: zod.string().nullish(),
        id: zod.string(),
        interactive: zod.boolean(),
        performers: zod.array(zod.string()),
        source: zod.enum(["Folder", "Download", "Stash"]),
        stashSceneId: zod.number().nullish(),
        tags: zod.array(zod.string()),
        title: zod.string(),
      }),
    }),
  ),
  pageNumber: zod.number().min(listVideosResponsePageNumberMin),
  pageSize: zod.number().min(listVideosResponsePageSizeMin),
  totalItems: zod.number().min(listVideosResponseTotalItemsMin),
  totalPages: zod.number().min(listVideosResponseTotalPagesMin),
})

export const cleanupVideosResponseDeletedCountMin = 0

export const cleanupVideosResponse = zod.object({
  deletedCount: zod.number().min(cleanupVideosResponseDeletedCountMin),
})

export const listStashVideosQueryPageMin = 0
export const listStashVideosQuerySizeMin = 0

export const listStashVideosQueryParams = zod.object({
  query: zod.string().nullish(),
  withMarkers: zod.boolean().nullish(),
  page: zod.number().min(listStashVideosQueryPageMin).nullish(),
  size: zod.number().min(listStashVideosQuerySizeMin).nullish(),
  sort: zod.string().nullish(),
  dir: zod.enum(["asc", "desc"]).nullish(),
})

export const listStashVideosResponsePageNumberMin = 0
export const listStashVideosResponsePageSizeMin = 0
export const listStashVideosResponseTotalItemsMin = 0
export const listStashVideosResponseTotalPagesMin = 0
export const listStashVideosResponseContentMarkerCountMin = 0

export const listStashVideosResponse = zod.object({
  content: zod.array(
    zod.object({
      createdOn: zod.number(),
      duration: zod.number(),
      existsInDatabase: zod.boolean(),
      fileName: zod.string(),
      id: zod.string(),
      interactive: zod.boolean(),
      markerCount: zod
        .number()
        .min(listStashVideosResponseContentMarkerCountMin),
      performers: zod.array(zod.string()),
      source: zod.enum(["Folder", "Download", "Stash"]),
      stashSceneId: zod.number().nullish(),
      tags: zod.array(zod.string()),
      title: zod.string(),
    }),
  ),
  pageNumber: zod.number().min(listStashVideosResponsePageNumberMin),
  pageSize: zod.number().min(listStashVideosResponsePageSizeMin),
  totalItems: zod.number().min(listStashVideosResponseTotalItemsMin),
  totalPages: zod.number().min(listStashVideosResponseTotalPagesMin),
})

export const getVideoParams = zod.object({
  id: zod.string(),
})

export const getVideoResponseMarkersIndexWithinVideoMin = 0

export const getVideoResponse = zod.object({
  markers: zod.array(
    zod.object({
      createdOn: zod.number(),
      end: zod.number(),
      fileName: zod.string().nullish(),
      id: zod.number(),
      indexWithinVideo: zod
        .number()
        .min(getVideoResponseMarkersIndexWithinVideoMin),
      primaryTag: zod.string(),
      sceneInteractive: zod.boolean(),
      sceneTitle: zod.string().nullish(),
      screenshotUrl: zod.string(),
      source: zod.enum(["Folder", "Download", "Stash"]),
      start: zod.number(),
      streamUrl: zod.string(),
      tags: zod.array(zod.string()),
      videoId: zod.string(),
    }),
  ),
  video: zod.object({
    createdOn: zod.number(),
    duration: zod.number(),
    fileName: zod.string(),
    filePath: zod.string().nullish(),
    id: zod.string(),
    interactive: zod.boolean(),
    performers: zod.array(zod.string()),
    source: zod.enum(["Folder", "Download", "Stash"]),
    stashSceneId: zod.number().nullish(),
    tags: zod.array(zod.string()),
    title: zod.string(),
  }),
})

export const updateVideoParams = zod.object({
  id: zod.string(),
})

export const updateVideoBody = zod.object({
  tags: zod.array(zod.string()).nullish(),
  title: zod.string().nullish(),
})

export const deleteVideoParams = zod.object({
  id: zod.string(),
})

export const detectMarkersParams = zod.object({
  id: zod.string(),
})

export const detectMarkersQueryParams = zod.object({
  threshold: zod.number().nullish(),
})

export const mergeStashVideoParams = zod.object({
  id: zod.string(),
})

export const mergeStashVideoResponseMarkerCountMin = 0

export const mergeStashVideoResponse = zod.object({
  markerCount: zod.number().min(mergeStashVideoResponseMarkerCountMin),
  video: zod.object({
    createdOn: zod.number(),
    duration: zod.number(),
    fileName: zod.string(),
    filePath: zod.string().nullish(),
    id: zod.string(),
    interactive: zod.boolean(),
    performers: zod.array(zod.string()),
    source: zod.enum(["Folder", "Download", "Stash"]),
    stashSceneId: zod.number().nullish(),
    tags: zod.array(zod.string()),
    title: zod.string(),
  }),
})

export const getProgressInfoParams = zod.object({
  id: zod.string(),
})

export const getProgressInfoResponse = zod.object({
  done: zod.boolean(),
  etaSeconds: zod.number().nullish(),
  itemsFinished: zod.number(),
  itemsTotal: zod.number(),
  message: zod.string(),
  timestamp: zod.string(),
  videoId: zod.string(),
})

export const fetchClipsBodyClipsClipPickerClipLengthsBeatsPerMeasureMin = 0
export const fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresCountMin = 0
export const fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMaxMin = 0
export const fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMinMin = 0
export const fetchClipsBodyClipsClipPickerClipLengthsBeatsPerMeasureMin = 0
export const fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresCountMin = 0
export const fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMaxMin = 0
export const fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMinMin = 0
export const fetchClipsBodyMarkersIndexWithinVideoMin = 0
export const fetchClipsBodyMarkersLoopsMin = 0

export const fetchClipsBody = zod.object({
  clipOrder: zod
    .object({
      type: zod.enum(["random"]),
    })
    .or(
      zod.object({
        type: zod.enum(["scene"]),
      }),
    )
    .or(
      zod.object({
        type: zod.enum(["no-op"]),
      }),
    )
    .or(
      zod.object({
        markerTitleGroups: zod.array(zod.array(zod.string())),
        type: zod.enum(["fixed"]),
      }),
    ),
  clips: zod.object({
    clipPicker: zod
      .object({
        clipLengths: zod
          .object({
            baseDuration: zod.number(),
            divisors: zod.array(zod.number()),
          })
          .and(
            zod.object({
              type: zod.enum(["randomized"]),
            }),
          )
          .or(
            zod
              .object({
                beatsPerMeasure: zod
                  .number()
                  .min(
                    fetchClipsBodyClipsClipPickerClipLengthsBeatsPerMeasureMin,
                  ),
                cutAfterMeasures: zod
                  .object({
                    count: zod
                      .number()
                      .min(
                        fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresCountMin,
                      ),
                    type: zod.enum(["fixed"]),
                  })
                  .or(
                    zod.object({
                      max: zod
                        .number()
                        .min(
                          fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMaxMin,
                        ),
                      min: zod
                        .number()
                        .min(
                          fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMinMin,
                        ),
                      type: zod.enum(["random"]),
                    }),
                  ),
                songs: zod.array(
                  zod.object({
                    length: zod.number(),
                    offsets: zod.array(zod.number()),
                  }),
                ),
              })
              .and(
                zod.object({
                  type: zod.enum(["songs"]),
                }),
              ),
          ),
        length: zod.number(),
      })
      .and(
        zod.object({
          type: zod.enum(["roundRobin"]),
        }),
      )
      .or(
        zod
          .object({
            clipLengths: zod
              .object({
                baseDuration: zod.number(),
                divisors: zod.array(zod.number()),
              })
              .and(
                zod.object({
                  type: zod.enum(["randomized"]),
                }),
              )
              .or(
                zod
                  .object({
                    beatsPerMeasure: zod
                      .number()
                      .min(
                        fetchClipsBodyClipsClipPickerClipLengthsBeatsPerMeasureMin,
                      ),
                    cutAfterMeasures: zod
                      .object({
                        count: zod
                          .number()
                          .min(
                            fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresCountMin,
                          ),
                        type: zod.enum(["fixed"]),
                      })
                      .or(
                        zod.object({
                          max: zod
                            .number()
                            .min(
                              fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMaxMin,
                            ),
                          min: zod
                            .number()
                            .min(
                              fetchClipsBodyClipsClipPickerClipLengthsCutAfterMeasuresMinMin,
                            ),
                          type: zod.enum(["random"]),
                        }),
                      ),
                    songs: zod.array(
                      zod.object({
                        length: zod.number(),
                        offsets: zod.array(zod.number()),
                      }),
                    ),
                  })
                  .and(
                    zod.object({
                      type: zod.enum(["songs"]),
                    }),
                  ),
              ),
            length: zod.number(),
            weights: zod.array(zod.array(zod.string().and(zod.number()))),
          })
          .and(
            zod.object({
              type: zod.enum(["weightedRandom"]),
            }),
          ),
      )
      .or(
        zod
          .object({
            clipDuration: zod.number(),
            divisors: zod.array(zod.number()),
          })
          .and(
            zod.object({
              type: zod.enum(["equalLength"]),
            }),
          ),
      )
      .or(
        zod.object({
          type: zod.enum(["noSplit"]),
        }),
      ),
    order: zod
      .object({
        type: zod.enum(["random"]),
      })
      .or(
        zod.object({
          type: zod.enum(["scene"]),
        }),
      )
      .or(
        zod.object({
          type: zod.enum(["no-op"]),
        }),
      )
      .or(
        zod.object({
          markerTitleGroups: zod.array(zod.array(zod.string())),
          type: zod.enum(["fixed"]),
        }),
      ),
  }),
  markers: zod.array(
    zod.object({
      id: zod.number(),
      indexWithinVideo: zod
        .number()
        .min(fetchClipsBodyMarkersIndexWithinVideoMin),
      loops: zod.number().min(fetchClipsBodyMarkersLoopsMin),
      selected: zod.boolean().nullish(),
      selectedRange: zod.array(zod.number().and(zod.number())),
      source: zod.enum(["Folder", "Download", "Stash"]),
      title: zod.string(),
      videoId: zod.string(),
    }),
  ),
  seed: zod.string().nullish(),
})

export const fetchClipsResponseClipsIndexWithinMarkerMin = 0
export const fetchClipsResponseClipsIndexWithinVideoMin = 0

export const fetchClipsResponse = zod.object({
  beatOffsets: zod.array(zod.number()).nullish(),
  clips: zod.array(
    zod.object({
      indexWithinMarker: zod
        .number()
        .min(fetchClipsResponseClipsIndexWithinMarkerMin),
      indexWithinVideo: zod
        .number()
        .min(fetchClipsResponseClipsIndexWithinVideoMin),
      markerId: zod.number(),
      markerTitle: zod.string(),
      range: zod.array(zod.number().and(zod.number())),
      source: zod.enum(["Folder", "Download", "Stash"]),
      videoId: zod.string(),
    }),
  ),
  streams: zod.record(zod.string(), zod.string()),
  videos: zod.array(
    zod.object({
      createdOn: zod.number(),
      duration: zod.number(),
      fileName: zod.string(),
      filePath: zod.string().nullish(),
      id: zod.string(),
      interactive: zod.boolean(),
      performers: zod.array(zod.string()),
      source: zod.enum(["Folder", "Download", "Stash"]),
      stashSceneId: zod.number().nullish(),
      tags: zod.array(zod.string()),
      title: zod.string(),
    }),
  ),
})

export const createVideoBodyOutputFpsMin = 0
export const createVideoBodyClipsIndexWithinMarkerMin = 0
export const createVideoBodyClipsIndexWithinVideoMin = 0
export const createVideoBodySelectedMarkersIndexWithinVideoMin = 0
export const createVideoBodySelectedMarkersLoopsMin = 0

export const createVideoBody = zod.object({
  clips: zod.array(
    zod.object({
      indexWithinMarker: zod
        .number()
        .min(createVideoBodyClipsIndexWithinMarkerMin),
      indexWithinVideo: zod
        .number()
        .min(createVideoBodyClipsIndexWithinVideoMin),
      markerId: zod.number(),
      markerTitle: zod.string(),
      range: zod.array(zod.number().and(zod.number())),
      source: zod.enum(["Folder", "Download", "Stash"]),
      videoId: zod.string(),
    }),
  ),
  encodingEffort: zod.enum(["low", "medium", "high"]),
  fileName: zod.string(),
  musicVolume: zod.number().nullish(),
  outputFps: zod.number().min(createVideoBodyOutputFpsMin),
  outputResolution: zod.array(
    zod
      .number()
      .min(createVideoBodyOutputResolutionMin)
      .and(zod.number().min(createVideoBodyOutputResolutionMin)),
  ),
  selectedMarkers: zod.array(
    zod.object({
      id: zod.number(),
      indexWithinVideo: zod
        .number()
        .min(createVideoBodySelectedMarkersIndexWithinVideoMin),
      loops: zod.number().min(createVideoBodySelectedMarkersLoopsMin),
      selected: zod.boolean().nullish(),
      selectedRange: zod.array(zod.number().and(zod.number())),
      source: zod.enum(["Folder", "Download", "Stash"]),
      title: zod.string(),
      videoId: zod.string(),
    }),
  ),
  songIds: zod.array(zod.number()),
  videoCodec: zod.enum(["av1", "h264", "h265"]),
  videoId: zod.string(),
  videoQuality: zod.enum(["low", "medium", "high", "lossless"]),
})

export const createVideoResponse = zod.object({
  finalFileName: zod.string(),
})

export const downloadVideoQueryParams = zod.object({
  videoId: zod.string(),
})

export const getBeatFunscriptBodyStrokeTypeEveryNthNMin = 0

export const getBeatFunscriptBody = zod.object({
  songIds: zod.array(zod.number()),
  strokeType: zod
    .object({
      everyNth: zod.object({
        n: zod.number().min(getBeatFunscriptBodyStrokeTypeEveryNthNMin),
      }),
    })
    .or(
      zod.object({
        accelerate: zod.object({
          end_strokes_per_beat: zod.number(),
          start_strokes_per_beat: zod.number(),
        }),
      }),
    ),
})

export const getCombinedFunscriptBodyClipsIndexWithinMarkerMin = 0
export const getCombinedFunscriptBodyClipsIndexWithinVideoMin = 0

export const getCombinedFunscriptBody = zod.object({
  clips: zod.array(
    zod.object({
      indexWithinMarker: zod
        .number()
        .min(getCombinedFunscriptBodyClipsIndexWithinMarkerMin),
      indexWithinVideo: zod
        .number()
        .min(getCombinedFunscriptBodyClipsIndexWithinVideoMin),
      markerId: zod.number(),
      markerTitle: zod.string(),
      range: zod.array(zod.number().and(zod.number())),
      source: zod.enum(["Folder", "Download", "Stash"]),
      videoId: zod.string(),
    }),
  ),
})

export const getNewIdResponse = zod.object({
  id: zod.string(),
})

export const downloadMusicQueryParams = zod.object({
  url: zod.string(),
})

export const downloadMusicResponse = zod.object({
  beats: zod.array(zod.number()),
  duration: zod.number(),
  fileName: zod.string(),
  songId: zod.number(),
  url: zod.string(),
})

export const uploadMusicResponse = zod.object({
  beats: zod.array(zod.number()),
  duration: zod.number(),
  fileName: zod.string(),
  songId: zod.number(),
  url: zod.string(),
})

export const getBeatsParams = zod.object({
  id: zod.number(),
})

export const getBeatsResponse = zod.object({
  length: zod.number(),
  offsets: zod.array(zod.number()),
})

export const getConfigResponse = zod.object({
  apiKey: zod.string(),
  stashUrl: zod.string(),
})

export const setConfigBody = zod.object({
  apiKey: zod.string(),
  stashUrl: zod.string(),
})

export const getHealthQueryParams = zod.object({
  url: zod.string(),
  apiKey: zod.string(),
})

export const getVersionResponse = zod.object({
  version: zod.string(),
})
