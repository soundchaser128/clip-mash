/*
 * clip-mash
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.22.0-pre.1
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClipLengthOptionsOneOf1 {
    #[serde(rename = "beatsPerMeasure")]
    pub beats_per_measure: i32,
    #[serde(rename = "cutAfterMeasures")]
    pub cut_after_measures: Box<models::MeasureCount>,
    #[serde(rename = "songs")]
    pub songs: Vec<models::Beats>,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl ClipLengthOptionsOneOf1 {
    pub fn new(
        beats_per_measure: i32,
        cut_after_measures: models::MeasureCount,
        songs: Vec<models::Beats>,
        r#type: Type,
    ) -> ClipLengthOptionsOneOf1 {
        ClipLengthOptionsOneOf1 {
            beats_per_measure,
            cut_after_measures: Box::new(cut_after_measures),
            songs,
            r#type,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "songs")]
    Songs,
}

impl Default for Type {
    fn default() -> Type {
        Self::Songs
    }
}
