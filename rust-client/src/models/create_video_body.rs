/*
 * clip-mash
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.22.0-pre.1
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateVideoBody {
    #[serde(rename = "clips")]
    pub clips: Vec<models::Clip>,
    #[serde(rename = "encodingEffort")]
    pub encoding_effort: models::EncodingEffort,
    #[serde(rename = "fileName")]
    pub file_name: String,
    #[serde(rename = "forceReEncode")]
    pub force_re_encode: bool,
    #[serde(
        rename = "musicVolume",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub music_volume: Option<Option<f64>>,
    #[serde(rename = "outputFps")]
    pub output_fps: i32,
    #[serde(rename = "outputResolution")]
    pub output_resolution: Vec<models::CreateVideoBodyOutputResolutionInner>,
    #[serde(
        rename = "padding",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub padding: Option<Option<models::PaddingType>>,
    #[serde(rename = "selectedMarkers")]
    pub selected_markers: Vec<models::SelectedMarker>,
    #[serde(rename = "songIds")]
    pub song_ids: Vec<i64>,
    #[serde(rename = "videoCodec")]
    pub video_codec: models::VideoCodec,
    #[serde(rename = "videoId")]
    pub video_id: String,
    #[serde(rename = "videoQuality")]
    pub video_quality: models::VideoQuality,
}

impl CreateVideoBody {
    pub fn new(
        clips: Vec<models::Clip>,
        encoding_effort: models::EncodingEffort,
        file_name: String,
        force_re_encode: bool,
        output_fps: i32,
        output_resolution: Vec<models::CreateVideoBodyOutputResolutionInner>,
        selected_markers: Vec<models::SelectedMarker>,
        song_ids: Vec<i64>,
        video_codec: models::VideoCodec,
        video_id: String,
        video_quality: models::VideoQuality,
    ) -> CreateVideoBody {
        CreateVideoBody {
            clips,
            encoding_effort,
            file_name,
            force_re_encode,
            music_volume: None,
            output_fps,
            output_resolution,
            padding: None,
            selected_markers,
            song_ids,
            video_codec,
            video_id,
            video_quality,
        }
    }
}
