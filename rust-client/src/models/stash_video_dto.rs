/*
 * clip-mash
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.22.0-pre.1
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StashVideoDto {
    #[serde(rename = "createdOn")]
    pub created_on: i64,
    #[serde(rename = "duration")]
    pub duration: f64,
    #[serde(rename = "existsInDatabase")]
    pub exists_in_database: bool,
    #[serde(rename = "fileName")]
    pub file_name: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "interactive")]
    pub interactive: bool,
    #[serde(rename = "markerCount")]
    pub marker_count: i32,
    #[serde(rename = "performers")]
    pub performers: Vec<String>,
    #[serde(rename = "source")]
    pub source: models::VideoSource,
    #[serde(
        rename = "stashSceneId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub stash_scene_id: Option<Option<i64>>,
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
    #[serde(rename = "title")]
    pub title: String,
}

impl StashVideoDto {
    pub fn new(
        created_on: i64,
        duration: f64,
        exists_in_database: bool,
        file_name: String,
        id: String,
        interactive: bool,
        marker_count: i32,
        performers: Vec<String>,
        source: models::VideoSource,
        tags: Vec<String>,
        title: String,
    ) -> StashVideoDto {
        StashVideoDto {
            created_on,
            duration,
            exists_in_database,
            file_name,
            id,
            interactive,
            marker_count,
            performers,
            source,
            stash_scene_id: None,
            tags,
            title,
        }
    }
}
